// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderFood.Data;

#nullable disable

namespace OrderFood.Migrations
{
    [DbContext(typeof(API_OrderFood_Entities))]
    partial class API_OrderFood_EntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderFood.Data.FoodByRestaurant", b =>
                {
                    b.Property<string>("FoodID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Mode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("FoodID");

                    b.HasIndex("UnitID");

                    b.ToTable("FoodByRestaurant", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.FoodForUser", b =>
                {
                    b.Property<string>("FoodID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Mode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("RestaurantID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("RestaurantUnitID")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("FoodID");

                    b.HasIndex("RestaurantID");

                    b.HasIndex("RestaurantUnitID");

                    b.ToTable("FoodForUser", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.Log", b =>
                {
                    b.Property<string>("LogID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("Time")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("LogID");

                    b.ToTable("Log", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int?>("Mode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("Price")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.HasKey("OrderID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UserID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("FoodID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int?>("Mode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OrderID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("FoodID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.RefreshToken", b =>
                {
                    b.Property<string>("TokenID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsRevoked")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUsed")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.Role", b =>
                {
                    b.Property<string>("RoleID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Mode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleID");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.Unit", b =>
                {
                    b.Property<string>("UnitID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Mode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UnitID");

                    b.ToTable("Unit", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Mode")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("UnitID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.HasIndex("RoleID");

                    b.HasIndex("UnitID");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("OrderFood.Data.FoodByRestaurant", b =>
                {
                    b.HasOne("OrderFood.Data.Unit", "Unit")
                        .WithMany("FoodByRestaurants")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("OrderFood.Data.FoodForUser", b =>
                {
                    b.HasOne("OrderFood.Data.Unit", "Unit")
                        .WithMany("FoodForUsers")
                        .HasForeignKey("RestaurantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderFood.Data.Unit", "Restaurant")
                        .WithMany("FoodFromRestaurants")
                        .HasForeignKey("RestaurantUnitID");

                    b.Navigation("Restaurant");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("OrderFood.Data.Order", b =>
                {
                    b.HasOne("OrderFood.Data.Unit", "Unit")
                        .WithMany("Orders")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OrderFood.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderFood.Data.OrderDetail", b =>
                {
                    b.HasOne("OrderFood.Data.FoodForUser", "FoodForUser")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderFood.Data.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodForUser");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderFood.Data.RefreshToken", b =>
                {
                    b.HasOne("OrderFood.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderFood.Data.User", b =>
                {
                    b.HasOne("OrderFood.Data.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderFood.Data.Unit", "Unit")
                        .WithMany("Users")
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("OrderFood.Data.FoodForUser", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OrderFood.Data.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OrderFood.Data.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OrderFood.Data.Unit", b =>
                {
                    b.Navigation("FoodByRestaurants");

                    b.Navigation("FoodForUsers");

                    b.Navigation("FoodFromRestaurants");

                    b.Navigation("Orders");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OrderFood.Data.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
